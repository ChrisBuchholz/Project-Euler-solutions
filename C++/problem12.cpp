/**
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *  
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 **/

#include <iostream>
#include <vector>

std::vector<int> find_factors(unsigned long long n)
{
	std::vector<int> factors;
	for (unsigned long long i = 1; i * i <= n; ++i) {
		if (n % i == 0) {
			factors.push_back(i);
			factors.push_back(n/i);
		}
	}
	return factors;
}

int triangular_number(int n)
{
	int sum = 0;
	for (int i = 0; i <= n; ++i)
		sum += i;
	return sum;
}

int main(int argc, const char * argv[])
{
	unsigned long long num = 0;
	for (unsigned long long i = 0, t = 0; ; ++i, t = triangular_number(i)) {
		int factors = find_factors(t).size();

		if (factors > 500) {
			num = t;
			break;
		}
	}
	std::cout << num << std::endl;
    return 0;
}
